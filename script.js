// L·∫•y c√°c ph·∫ßn t·ª≠ DOM c·∫ßn thi·∫øt
const openModalBtn = document.getElementById('openModalBtn');
const dialogModal = document.getElementById('dialogModal');
const modalContent = dialogModal.querySelector('.modal-content');
const dialogTitle = document.getElementById('dialogTitle');
const dialogMessage = document.getElementById('dialogMessage');
const yesBtn = document.getElementById('yesBtn');
const noBtn = document.getElementById('noBtn');
const backBtn = document.getElementById('backBtn');
const notification = document.getElementById('notification');
const notificationText = document.getElementById('notificationText');
const continueBtn = document.getElementById('continueBtn');
const modalCloseBtn = document.getElementById('modalCloseBtn');
const backgroundMusic = document.getElementById('backgroundMusic');

let noClickCount = 0;
let notificationTimeoutId;

const defaultLongMessage = `V·∫≠y l√† qua m·ªôt c√°i tr·∫£ ƒë∆°n ƒë√£ m·ªü ƒë·∫ßu cho nhi·ªÅu ch∆∞∆°ng kh√°c. M·ªü ƒë·∫ßu cho √¢m m∆∞u b·ªï b√©o chui ƒë·ªÉ b√°n n·ªôi t·∫°ng üòè . M√† nay √∫ nu r·ªìi. C·∫£m ·ªõn m√≠ ng·ª´ nha.
 
<br> 2 ƒë·ª©a ƒë√£ ƒëi qua c≈©ng nhi·ªÅu vui bu·ªìn c√πng nhau. Mong nh·ªØng ng√†y v·ªÅ sau 2 ƒë·ª©a lu√¥n c√≥ nhau, iu shuong quan t√¢m nhau.
  
ƒê√£ s·∫Øp qua ch∆∞∆°ng m·ªõi, nhi·ªÅu th·ª© ph√≠a tr∆∞·ªõc vui bu·ªìn, kh√≥ khƒÉn c√≥ ƒë·ªß, d√π sao quan tr·ªçng v·∫´n l√† ch√∫ng ta lu√¥n quan t√¢m iu sh∆∞∆°ng nhau.

Chui l√† m·ªôt ng∆∞·ªùi kh√¥ khan, √¥ng gi√† kh√≥ ·ªü n√™n ch·ªãu th√¨ ch·ªãu, ko ch·ªãu th√¨ ch·ªãu nha √™m. Gi√† z ch·ª© sh∆∞∆°ng m√≠ ng·ª´ nha. M·∫∑c d√π m√≠ ng·ª´ l√¨ l·∫Øm.

H√¥m nay l√† m·ªôt ng√†y n·∫Øng ƒë·∫πp, m√¢y tr·ªùi trong xanh,  th·ªùi ti·∫øt nh∆∞ c≈©ng ·ªßng h·ªô chui g·ª≠i t·ªõi Em nh·ªØng l·ªùi n√†y.
"Em L√†m z·ª£ Anh nha" ‚ù§Ô∏è

T·ª´ √îng gi√† ƒë√°ng gh√©t d·ªÖ ·ªü.`;

const initialDialogTitle = "G·ª≠i T·ªõi Em";

function updateDialogContent(title, message) {
    dialogTitle.textContent = title;
    dialogMessage.innerHTML = message;
}

function showModal(title = initialDialogTitle, message = defaultLongMessage) {
    noClickCount = 0;
    updateDialogContent(title, message);
    dialogModal.classList.remove('hidden');

    yesBtn.classList.remove('hidden');
    noBtn.classList.remove('hidden');
    backBtn.classList.add('hidden');
    noBtn.textContent = 'Kh√¥ng';
    noBtn.disabled = false;
    noBtn.classList.remove('opacity-50', 'cursor-not-allowed');

    setTimeout(() => {
        dialogModal.classList.add('show');
        modalContent.classList.add('show');
    }, 10);
}

function hideModal() {
    dialogModal.classList.remove('show');
    modalContent.classList.remove('show');
    setTimeout(() => {
        dialogModal.classList.add('hidden');
        noClickCount = 0;
        noBtn.disabled = false;
        noBtn.classList.remove('opacity-50', 'cursor-not-allowed');
        yesBtn.classList.remove('hidden');
        backBtn.classList.add('hidden');
        noBtn.textContent = 'Kh√¥ng';
        updateDialogContent(initialDialogTitle, defaultLongMessage);
    }, 300);
}

function showNotification(message, showContinueBtn = false) {
    if (notificationTimeoutId) {
        clearTimeout(notificationTimeoutId);
    }
    notificationText.textContent = message;
    if (showContinueBtn) {
        continueBtn.classList.remove('hidden');
    } else {
        continueBtn.classList.add('hidden');
    }

    notification.classList.add('show');
    if (!showContinueBtn) {
        notificationTimeoutId = setTimeout(() => {
            notification.classList.remove('show');
        }, 3000);
    }
}

openModalBtn.addEventListener('click', () => {
    showModal();
});

yesBtn.addEventListener('click', (e) => {
    e.stopPropagation();
    hideModal();
    showNotification('B·∫°n ƒë√£ ch·ªçn: C√≥! Nh·∫•n Ti·∫øp t·ª•c ƒë·ªÉ ƒë·∫øn trang m·ªõi.', true);
});

noBtn.addEventListener('click', (e) => {
    e.stopPropagation();
    noClickCount++;
    let currentDialogMessage = '';
    const currentDialogTitle = dialogTitle.textContent;

    if (noClickCount === 1) {
        currentDialogMessage = 'B·∫°n ƒë√£ ch·ªçn Kh√¥ng l·∫ßn 1. B·∫°n c√≥ mu·ªën suy nghƒ© l·∫°i kh√¥ng?';
        yesBtn.classList.add('hidden');
        backBtn.classList.remove('hidden');
        noBtn.textContent = 'Kh√¥ng n·ªØa';
    } else if (noClickCount === 2) {
        currentDialogMessage = 'B·∫°n ƒë√£ ch·ªçn Kh√¥ng l·∫ßn 2. Quy·∫øt ƒë·ªãnh cu·ªëi c√πng ch·ª©?';
        noBtn.textContent = 'V·∫´n Kh√¥ng';
    } else if (noClickCount === 3) {
        currentDialogMessage = 'B·∫°n ƒë√£ ch·ªçn Kh√¥ng l·∫ßn 3. H√£y c√¢n nh·∫Øc k·ªπ!';
        noBtn.textContent = 'Ch·∫Øc ch·∫Øn Kh√¥ng';
    } else {
        currentDialogMessage = `B·∫°n ƒë√£ ch·ªçn Kh√¥ng ${noClickCount} l·∫ßn. N√∫t "Kh√¥ng" ƒë√£ b·ªã v√¥ hi·ªáu h√≥a.`;
    }

    updateDialogContent(currentDialogTitle, currentDialogMessage);
    showNotification(`B·∫°n ƒë√£ ch·ªçn: Kh√¥ng! (L·∫ßn ${noClickCount})`);

    if (noClickCount >= 4) {
        noBtn.disabled = true;
        noBtn.classList.add('opacity-50', 'cursor-not-allowed');
    }
});

backBtn.addEventListener('click', (e) => {
    e.stopPropagation();
    showModal();
    showNotification('ƒê√£ quay l·∫°i m·ª•c x√°c nh·∫≠n h√†nh ƒë·ªông.');
});

continueBtn.addEventListener('click', (e) => {
    e.stopPropagation();
    notification.classList.remove('show');
    continueBtn.classList.add('hidden');
    window.location.href = 'https://doananhluan.github.io/ryanL/home';
});

modalCloseBtn.addEventListener('click', (e) => {
    e.stopPropagation();
    hideModal();
});

document.body.addEventListener('click', (e) => {
    if (notification.classList.contains('show')) {
        if (!notification.contains(e.target) && e.target !== openModalBtn) {
            notification.classList.remove('show');
            continueBtn.classList.add('hidden');
        }
    }
});

document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && dialogModal.classList.contains('show')) {
        hideModal();
    }
    if (e.key === 'Escape' && notification.classList.contains('show')) {
        notification.classList.remove('show');
        continueBtn.classList.add('hidden');
    }
});

document.addEventListener('DOMContentLoaded', () => {
    backgroundMusic.play().catch(error => {
        console.log("Autoplay of background music failed, likely due to browser policy:", error);
    });
});



